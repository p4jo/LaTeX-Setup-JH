\ProvidesExplPackage{JHGeneralCommands}{2022/04/07}{1.0.1}{General Commands by Johannes H}

%%%%%%% META COMMANDS
\RequirePackage{xspace} % Ein Leerzeichen, das man ans Ende von Befehlen bauen kann, das keines wird, wenn da ein Satzzeichen steht
\RequirePackage{xparse} % in modern kernels already loaded

\NewDocumentCommand\mathname{mm}{\NewDocumentCommand{#1}{}{\ensuremath{#2}\xspace}}


\newcommand\currentPath\CurrentFilePath % this is relative to the main file
% gets overwritten in <project>/<project>_generated.tex files when using JHAutomate

\ProvideDocumentCommand\autoindex{som}{
    \index{#3}
    \IfBooleanT{#1}{#3}
} % better version in Index.tex (documentclass option useIndex)
%%%%%%% Grundlagen 
\NewDocumentCommand\Def{som}{
    \textbf{
        \IfBooleanTF{#1}{
            #3
        }{
            \IfValueTF{#2}{
                \autoindex{#2}
                #3
            }{
                \autoindex*{#3}
            }
        }
    }
}

\newcommand{\de}{\partial}

\definecolor{grau}{rgb}{0.5, 0.5, 0.5}
% Für vernachlässigbare oder unwichtige Stellen, wie \kB
\newcommand{\vern}[1]{
    \TextOrMath{
        {\color{grau} #1 }
    }{
        \mathcolor{grau}{
            #1
        }
    }
}
\newcommand{\ger}[1]{\mathrm{#1}} % gerade, d.h. aufrecht

\NewDocumentCommand{\sub}{o m o}{
    \TextOrMath{
        \textsubscript{
            \IfValueT{#1}{
                $#1$,~
            }
            #2
            \IfValueT{#3}{
                ,~$#3$
            }
        }
    }{
        \sb{ % \sb = _ (das wird aber hier in ExplSyntax nicht als \sb interpretiert)
            \IfValueT{#1}{
                #1\text{,~}
            }
            \text{#2}
            \IfValueT{#3}{
                \text{,~}#3
            }
        }
    }
}
\NewDocumentCommand{\supt}{o m o}{
    \TextOrMath{
        \textsuperscript{
            \IfValueT{#1}{
                $#1$,~
            }
            #2
            \IfValueT{#3}{
                ,~$#3$
            }
        }
    }{
        \sp{ % \sp = ^
            \IfValueT{#1}{
                #1\text{,~}
            }
            \text{#2}
            \IfValueT{#3}{
                \text{,~}#3
            }
        }
    }
}
\newcommand{\inv}{^{-1}}
\newcommand{\konst}{\text{konst.}}

\newcommand{\wert}[1]{\num{#1}} % obsolet
\newcommand{\Wert}[2]{\SI{#1}{#2}\xspace} % obsolet

\newcommand\numfrac[2]{\frac{\num{#1}}{\num{#2}}} 

\RequirePackage{interval} % Optionen in format
\newcommand\ivoo[2]{\ointerval[scaled]{#1}{#2}}
\newcommand\ivao[2]{\rinterval[scaled]{#1}{#2}}
\newcommand\ivoa[2]{\linterval[scaled]{#1}{#2}}
\newcommand\ivaa[2]{\interval[scaled]{#1}{#2}}

% \makeatletter
% \def\interval@left@value\relax
% \def\interval@right@value\relax
% \def\set@interval@value[#1]{
%     \ifx\interval@left@value\relax
%         \def\interval@left@value{#1}
%     \else
%         \def\interval@right@value{#1}
%     \fi
% }
\NewDocumentCommand\Ivaa{> { \SplitArgument{1} {,} } O{0,1} }{
    \ivaa#1
}
\NewDocumentCommand\Ivao{> { \SplitArgument{1} {,} } D[){0,1} }{
    \ivao#1
}
\NewDocumentCommand\Ivoa{
    >{ \SplitArgument{1} {,} }d]] 
    >{ \SplitArgument{1}{,} }D(]{0,1} 
}{
    \IfValueTF{#1}{
        \ivoa#1
    }{
        \ivoa#2
    }
}
\NewDocumentCommand\Ivoo{
    >{ \SplitArgument{1} {,} }d][ 
    >{ \SplitArgument{1}{,} }D(){0,1} 
}{
    \IfValueTF{#1}{
        \ivoo#1
    }{
        \ivoo#2
    }
}
\@ifpackageloaded{unicode-math}{
    \newcommand\numberset[1]{{\symbb{#1}}} % Zahlmengen (natürliche, ganze, reelle, etc.)
}{
    \newcommand\numberset[1]{{\mathbb{#1}}} 
}
\mathname\nN{\numberset{N}}
\mathname\NN{{\numberset{N}\sb 0}} % "größer"
\mathname\ZZ{\numberset{Z}}
\mathname\RR{\numberset{R}}
\mathname\CC{\numberset{C}}
\mathname\QQ{\numberset{Q}}

\@ifpackageloaded{hyperref}{
    \newcommand\mathintitle[1]{\texorpdfstring{$#1$}{#1}}
}{}

\newcommand\ensuredisplaymath[1]{
    \TextOrMath{
        \[ #1 \]
    }{#1}    
}

%%%%% Komplexe Commands
\newcommand\__Grafik_END{}
\newcommand\__Grafik_PRE{}
\newcommand\__Grafik_INCLUDE{}
\NewDocumentCommand\Grafik{
    O{} % #1: Width (multiple of \textwidth)
    m % #2: Label (if #4 is missing: the path inside the project folder (relative to the project_generated.tex), and the label will be prefixed with F.) (*)
    +m % #3: The caption text (*)
    > { \SplitList{,} } g % #4: The path(s) (relative to the main file)
    +D(){} % #5: "footnote" (smaller text directly below the picture)
    d<> % #6: page if referencing a pdf file
    d|| % #7: Last frame: Will add a video player. Video must be saved as a lot of images named <path>1.jpg, ... ,<path><lastFrame>.jpg
    s % #8: Place here! (H placement option). Needs `float`
    O{12} % #9: Framerate if using #7
}{
    \renewcommand\__Grafik_INCLUDE[1]{
        \IfValueTF{#6} { % <Seite>
            \includegraphics[
                width=#1\textwidth,
                page=#6
            ]{##1}
        }{ 
            \IfValueTF{#7}{ % |Letzter Frame|
                \animategraphics[
                    width=#1\textwidth,
                    autoplay,
                    loop,
                    controls={play,stop,step}
                ]{#9}
                {##1}
                {0}
                {#7}
            }{
                \includegraphics[
                    width=#1\textwidth
                ]{##1}
            }
        }
    }
    \IfBooleanTF#8{
        \begin{figure}[H]
    }
    {
        \begin{figure}[htb]
    }
        \begin{center}
        % 
        \caption{#3} % #3 ist zweites m {Text}
        \IfValueTF{#4}{
            \renewcommand\__Grafik_PRE{}
            \ProcessList{#4}{\__Grafik_INCLUDE}
        }{
            \renewcommand\__Grafik_PRE{F.}
            \__Grafik_INCLUDE{\currentPath/#2}
        }
        % 
        \IfValueTF{#6}{
            \renewcommand\__Grafik_END{#6}
        }{
            \renewcommand\__Grafik_END{}
        }
        \label{\__Grafik_PRE#2\__Grafik_END} % #2 ist erstes m {Label} bzw. {Name}
        % 
        \IfValueT{#5}{\\
            {\scriptsize
            % \sffamily
            % \mathversion{sans}
            #5}
        }
    \end{center}
    \end{figure}
}


\newcommand{\Tabelle}[4]{
    \begin{table}[htb]
        \caption{#2}
        \label{#1}
        \centering
        % \adjustbox{}{
        % \adjustbox{max width=\textwidth}{
            \begin{tabular}{#3}
                #4
            \end{tabular}
        % }
    \end{table}
} 
% BEISPIEL: \Tabelle{T.test}{Testtabelle}{c|c}{a&b\\b&a}


% \pgfqkeys{/Code}{
%   x1/.store in=\xone,
%   y1/.store in=\yone,
%   x2/.store in=\xtwo,
%   y2/.store in=\ytwo
% }
% \newcommand\MyVal[1]{\pgfkeysvalueof{/Code/#1}}
% \DeclareDocumentCommand\Code{O{} O{myPython} G{Code} g +d``}{
%     \IfValueTF{#4}{
%         \def\__Code_caption{#4}
%     }{
%         \def\__Code_caption{#3}
%     }
%     \IfValueTF{#5}{
%         \begin{lstlisting}[language=#2,caption={\__Code_caption}]
%             #5
%         \end{lstlisting}
%     }{
%         \lstinputlisting[language=#2,caption={\__Code_caption}]{\currentPath/#3}%
%     }
% }

% \def\code\lstlinline%

\newcommand{\glei}[2]{\begin{equation}\tag{#1}\label{G.#1}
    #2
\end{equation}} % obsolete

% equation environment. You can prepend \Gleichung* before inline-math with $...$ to allow multi-line equations.
\NewDocumentCommand\Gleichung {
    t' % #1: Optional ' for alignat environment
    s % #2: Optional * for no name and number
    g % #3: Optional {<Name>} for (<Name>) instead of (1.1.1) and label G.<Name>
    o % #4: Optional [<Label>]
    +D$${\text{\textcolor{red}{Gleichung~fehlt.}}} % #5: Content of the equation in $...$
    t. % #6: If you have a dot after the closing $, it will be pulled inside (instead of it being on the beginning of the next line)
    t, % #7: Same for commas
    }{ 
    % \typeout{\#1=#1,\#2=#2,\#3=#3,\#5=#5,\#6=#6,\#7=#7}
    \def\Gleichung_content:{
        #5
        \IfBooleanT{#6}{.}
        \IfBooleanT{#7}{,}
    }
    \def\Gleichung_label:{
        \IfValueT{#3}{
            \IfBooleanF{#2}{ \tag{#3} }
            \label{G.#3}
        }
        \IfValueT{#4}{
            \label{#4}
        }
    }
    \IfBooleanTF{#1}{ % \Gleichung' : multiple '&' allowed and multiple '\tag'.
        \IfBooleanTF{#2}{
            % Earlier: \begin{equation(*)}\begin{alignedat}{-1} ... -- but no \tag allowed inside equation*, but inside \alignat*
            \begin{alignat*}{-1} 
                \Gleichung_label:
                \Gleichung_content:
            \end{alignat*} 
        }{
            \begin{alignat}{-1}                    
                \Gleichung_label:                
                \Gleichung_content:
            \end{alignat} 
        }
    }{
        \IfBooleanTF{#2}{ 
            \begin{equation*} 
                \Gleichung_label:
                \begin{split}
                    \Gleichung_content:
                \end{split} 
            \end{equation*} 
        }{
            \begin{equation} 
                \Gleichung_label:
                \begin{split}
                    \Gleichung_content:
                \end{split} 
            \end{equation}
        } 
    }
}